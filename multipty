#!/usr/bin/env python

import pty
import sys
import os
import subprocess
import threading
import termios
import atexit
import re

def enable_echo(fd, enabled):
    (iflag, oflag, cflag, lflag, ispeed, ospeed, cc) \
        = termios.tcgetattr(fd)
    if enabled:
        lflag |= termios.ECHO
    else:
        lflag &= ~termios.ECHO
    new_attr = [iflag, oflag, cflag, lflag, ispeed, ospeed, cc]
    termios.tcsetattr(fd, termios.TCSANOW, new_attr)

def process_args(orig_args, host):
    args = []

    def sub(match):
        (h, s) = match.groups(0)
        if h == host:
            return s
        return ""

    for arg in orig_args:
        arg = re.sub(r"[%][{]on:([^\}]+)}[{]([^\}]+)[}]", sub, arg)
        actual_host = host.split('^', 1)[0]
        arg = arg.replace('%{host}', actual_host)
        arg = arg.replace("\n", " ")
        args.append(arg)
    return args

def parallel(hosts, orig_args, shell=False, demo=True):
    fds = []

    processes = []
    semaphore = threading.Semaphore(1)
    counter = [0]
    lock = threading.Lock()
    masters = []

    def sub(host, args):
        """"""
        (master, slave) = pty.openpty()
        masters.append(master)
        try:
            prefix = ["setsid"]
            if shell:
                args = prefix + ["bash", "-c", ' '.join([repr(a) for a in args])]
            else:
                args = prefix + args
            process = subprocess.Popen(args,
                                       stdin=slave,
                                       stdout=slave,
                                       stderr=slave,
                                       close_fds=False)
            processes.append((process, master))

            os.close(slave)
            counter[0] += 1
            slave = -1
            if counter[0] == len(hosts):
                semaphore.release()

            buf = ''
            while True:
                try:
                    data_read = os.read(master, 0x10000)
                    buf += data_read
                except OSError, e:
                    break
                if not data_read:
                    break

                splited_lines = buf.split('\n')
                for (pos, line) in enumerate(splited_lines):
                    if pos != len(splited_lines) - 1:
                        lock.acquire()
                        try:
                            print "%s: %s" % (host, line)
                        except IOError:
                            pass
                        lock.release()
                    else:
                        buf = line
        finally:
            if slave != -1:
                os.close(slave)
                counter[0] += 1
                if counter[0] == len(hosts):
                    semaphore.release()

    if not demo:
        semaphore.acquire()

    threads = []
    for host in hosts:
        args = process_args(orig_args, host)
        if demo:
            for arg in args:
                if ' ' in arg or '\'' in arg or '\"' in arg:
                    print repr(arg),
                else:
                    print arg,
            print
            continue

        thread = threading.Thread(target=sub, args=(host, args, ))
        thread.daemon = True
        thread.start()
        threads.append(thread)

    if not demo:
        semaphore.acquire()

    while processes:
        try:
            waited = []
            for (process, master) in processes:
                if process.returncode is None:
                    process.wait()
                else:
                    waited.append((process, master))
            for (process, master) in waited:
                processes.remove((process, master))
        except (KeyboardInterrupt, SystemExit):
            for (process, master) in processes:
                os.write(master, '\3')
                # process.send_signal(signal.SIGINT)

    for thread in threads:
        thread.join()

    for master in masters:
        os.close(master)

def main():
    pos = 0
    i = iter(sys.argv[1:])

    hosts = []
    cmd_start = None
    demo = False

    for arg in i:
        if arg.startswith(':'):
            cmd_start = arg
            break
        if arg == '-d':
            demo = True
            continue

        hosts.append(arg)

    if not demo:
        enable_echo(0, False)
        atexit.register(enable_echo, sys.stdin.fileno(), True)

    while cmd_start:
        cmd_start = cmd_start[1:]
        shell = False
        if cmd_start.startswith(':'):
            shell = True
            cmd_start = cmd_start[1:]

        limit = None
        try:
            limit = long(cmd_start, 10)
        except ValueError:
            pass

        cmd_start = None
        orig_args = []
        for arg in i:
            if limit is not None:
                limit -= 1
            orig_args.append(arg)
            if limit is not None and limit == 0:
                try:
                    cmd_start = i.next()
                    break
                except StopIteration:
                    break

        parallel(hosts, orig_args, shell=shell, demo=demo)

if __name__ == '__main__':
    main()
